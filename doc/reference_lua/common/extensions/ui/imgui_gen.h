///////////////////////////////////////////////////////////////////////////////
// this file is used for declaring C types for LuaJIT's FFI. Do not use it in C
///////////////////////////////////////////////////////////////////////////////

// this file is automatically generated, do not change it

typedef struct { float x, y; } ImVec2_C;
typedef struct { float x, y, z, w; } ImVec4_C;

typedef struct ImDrawCmd ImDrawCmd;
typedef struct ImDrawData ImDrawData;
typedef struct ImDrawList ImDrawList;
typedef struct ImDrawListSharedData ImDrawListSharedData;
typedef struct ImDrawListSplitter ImDrawListSplitter;
typedef struct ImDrawVert ImDrawVert;
typedef struct ImFont ImFont;
typedef struct ImFontAtlas ImFontAtlas;
typedef struct ImFontBuilderIO ImFontBuilderIO;
typedef struct ImFontConfig ImFontConfig;
typedef struct ImFontGlyph ImFontGlyph;
typedef struct ImFontGlyphRangesBuilder ImFontGlyphRangesBuilder;
typedef struct ImColor ImColor;
typedef struct ImGuiContext ImGuiContext;
typedef struct ImGuiIO ImGuiIO;
typedef struct ImGuiInputTextCallbackData ImGuiInputTextCallbackData;
typedef struct ImGuiListClipper ImGuiListClipper;
typedef struct ImGuiPayload ImGuiPayload;
typedef struct ImGuiPlatformIO ImGuiPlatformIO;
typedef struct ImGuiPlatformMonitor ImGuiPlatformMonitor;
typedef struct ImGuiSizeCallbackData ImGuiSizeCallbackData;
typedef struct ImGuiStorage ImGuiStorage;
typedef struct ImGuiStyle ImGuiStyle;
typedef struct ImGuiTableSortSpecs ImGuiTableSortSpecs;
typedef struct ImGuiTableColumnSortSpecs ImGuiTableColumnSortSpecs;
typedef struct ImGuiTextBuffer ImGuiTextBuffer;
typedef struct ImGuiTextFilter ImGuiTextFilter;
typedef struct ImGuiViewport ImGuiViewport;
typedef struct ImGuiWindowClass ImGuiWindowClass;
typedef int ImGuiCol;
typedef int ImGuiCond;
typedef int ImGuiDataType;
typedef int ImGuiDir;
typedef int ImGuiKey;
typedef int ImGuiNavInput;
typedef int ImGuiMouseButton;
typedef int ImGuiMouseCursor;
typedef int ImGuiSortDirection;
typedef int ImGuiStyleVar;
typedef int ImGuiTableBgTarget;
typedef int ImDrawCornerFlags;
typedef int ImDrawListFlags;
typedef int ImFontAtlasFlags;
typedef int ImGuiBackendFlags;
typedef int ImGuiButtonFlags;
typedef int ImGuiColorEditFlags;
typedef int ImGuiConfigFlags;
typedef int ImGuiComboFlags;
typedef int ImGuiDockNodeFlags;
typedef int ImGuiDragDropFlags;
typedef int ImGuiFocusedFlags;
typedef int ImGuiHoveredFlags;
typedef int ImGuiInputTextFlags;
typedef int ImGuiKeyModFlags;
typedef int ImGuiPopupFlags;
typedef int ImGuiSelectableFlags;
typedef int ImGuiSliderFlags;
typedef int ImGuiTabBarFlags;
typedef int ImGuiTabItemFlags;
typedef int ImGuiTableFlags;
typedef int ImGuiTableColumnFlags;
typedef int ImGuiTableRowFlags;
typedef int ImGuiTreeNodeFlags;
typedef int ImGuiViewportFlags;
typedef int ImGuiWindowFlags;
typedef void* ImTextureID;
typedef unsigned int ImGuiID;
typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);
typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);
typedef unsigned short ImWchar16;
typedef unsigned int ImWchar32;
typedef ImWchar16 ImWchar;
typedef signed char         ImS8;
typedef unsigned char       ImU8;
typedef signed short        ImS16;
typedef unsigned short      ImU16;
typedef signed int          ImS32;
typedef unsigned int        ImU32;
typedef signed   long long  ImS64;
typedef unsigned long long  ImU64;
ImGuiContext * imgui_GetCurrentContext();
void imgui_SetCurrentContext(ImGuiContext* ctx);
ImGuiIO & imgui_GetIO();
ImGuiStyle & imgui_GetStyle();
void imgui_NewFrame();
void imgui_EndFrame();
void imgui_Render();
ImDrawData * imgui_GetDrawData();
void imgui_ShowDemoWindow(bool* p_open);
void imgui_ShowMetricsWindow(bool* p_open);
void imgui_ShowAboutWindow(bool* p_open);
void imgui_ShowStyleEditor(ImGuiStyle* ref);
bool imgui_ShowStyleSelector(const char* label);
void imgui_ShowFontSelector(const char* label);
void imgui_ShowUserGuide();
const char * imgui_GetVersion();
void imgui_StyleColorsDark(ImGuiStyle* dst);
void imgui_StyleColorsLight(ImGuiStyle* dst);
void imgui_StyleColorsClassic(ImGuiStyle* dst);
bool imgui_Begin(const char* name, bool* p_open, ImGuiWindowFlags flags);
void imgui_End();
bool imgui_BeginChild1(const char* str_id, const ImVec2* size, bool border, ImGuiWindowFlags flags);
bool imgui_BeginChild2(ImGuiID id, const ImVec2* size, bool border, ImGuiWindowFlags flags);
void imgui_EndChild();
bool imgui_IsWindowAppearing();
bool imgui_IsWindowCollapsed();
bool imgui_IsWindowFocused(ImGuiFocusedFlags flags);
bool imgui_IsWindowHovered(ImGuiHoveredFlags flags);
ImDrawList * imgui_GetWindowDrawList();
float imgui_GetWindowDpiScale();
ImGuiViewport * imgui_GetWindowViewport();
ImVec2 imgui_GetWindowPos();
ImVec2 imgui_GetWindowSize();
float imgui_GetWindowWidth();
float imgui_GetWindowHeight();
void imgui_SetNextWindowPos(const ImVec2* pos, ImGuiCond cond, const ImVec2* pivot);
void imgui_SetNextWindowSize(const ImVec2* size, ImGuiCond cond);
void imgui_SetNextWindowSizeConstraints(const ImVec2* size_min, const ImVec2* size_max, ImGuiSizeCallback custom_callback, void* custom_callback_data);
void imgui_SetNextWindowContentSize(const ImVec2* size);
void imgui_SetNextWindowCollapsed(bool collapsed, ImGuiCond cond);
void imgui_SetNextWindowFocus();
void imgui_SetNextWindowBgAlpha(float alpha);
void imgui_SetNextWindowViewport(ImGuiID viewport_id);
void imgui_SetWindowPos1(const ImVec2* pos, ImGuiCond cond);
void imgui_SetWindowSize1(const ImVec2* size, ImGuiCond cond);
void imgui_SetWindowCollapsed1(bool collapsed, ImGuiCond cond);
void imgui_SetWindowFocus1();
void imgui_SetWindowFontScale(float scale);
void imgui_SetWindowPos2(const char* name, const ImVec2* pos, ImGuiCond cond);
void imgui_SetWindowSize2(const char* name, const ImVec2* size, ImGuiCond cond);
void imgui_SetWindowCollapsed2(const char* name, bool collapsed, ImGuiCond cond);
void imgui_SetWindowFocus2(const char* name);
ImVec2 imgui_GetContentRegionAvail();
ImVec2 imgui_GetContentRegionMax();
ImVec2 imgui_GetWindowContentRegionMin();
ImVec2 imgui_GetWindowContentRegionMax();
float imgui_GetWindowContentRegionWidth();
float imgui_GetScrollX();
float imgui_GetScrollY();
void imgui_SetScrollX(float scroll_x);
void imgui_SetScrollY(float scroll_y);
float imgui_GetScrollMaxX();
float imgui_GetScrollMaxY();
void imgui_SetScrollHereX(float center_x_ratio);
void imgui_SetScrollHereY(float center_y_ratio);
void imgui_SetScrollFromPosX(float local_x, float center_x_ratio);
void imgui_SetScrollFromPosY(float local_y, float center_y_ratio);
void imgui_PushFont(ImFont* font);
void imgui_PopFont();
void imgui_PushStyleColor1(ImGuiCol idx, ImU32 col);
void imgui_PushStyleColor2(ImGuiCol idx, const ImVec4* col);
void imgui_PopStyleColor(int count);
void imgui_PushStyleVar1(ImGuiStyleVar idx, float val);
void imgui_PushStyleVar2(ImGuiStyleVar idx, const ImVec2* val);
void imgui_PopStyleVar(int count);
void imgui_PushAllowKeyboardFocus(bool allow_keyboard_focus);
void imgui_PopAllowKeyboardFocus();
void imgui_PushButtonRepeat(bool _repeat);
void imgui_PopButtonRepeat();
void imgui_PushItemWidth(float item_width);
void imgui_PopItemWidth();
void imgui_SetNextItemWidth(float item_width);
float imgui_CalcItemWidth();
void imgui_PushTextWrapPos(float wrap_local_pos_x);
void imgui_PopTextWrapPos();
ImFont * imgui_GetFont();
float imgui_GetFontSize();
ImVec2 imgui_GetFontTexUvWhitePixel();
ImU32 imgui_GetColorU321(ImGuiCol idx, float alpha_mul);
ImU32 imgui_GetColorU322(const ImVec4* col);
ImU32 imgui_GetColorU323(ImU32 col);
const ImVec4 & imgui_GetStyleColorVec4(ImGuiCol idx);
void imgui_Separator();
void imgui_SameLine(float offset_from_start_x, float spacing);
void imgui_NewLine();
void imgui_Spacing();
void imgui_Dummy(const ImVec2* size);
void imgui_Indent(float indent_w);
void imgui_Unindent(float indent_w);
void imgui_BeginGroup();
void imgui_EndGroup();
ImVec2 imgui_GetCursorPos();
float imgui_GetCursorPosX();
float imgui_GetCursorPosY();
void imgui_SetCursorPos(const ImVec2* local_pos);
void imgui_SetCursorPosX(float local_x);
void imgui_SetCursorPosY(float local_y);
ImVec2 imgui_GetCursorStartPos();
ImVec2 imgui_GetCursorScreenPos();
void imgui_SetCursorScreenPos(const ImVec2* pos);
void imgui_AlignTextToFramePadding();
float imgui_GetTextLineHeight();
float imgui_GetTextLineHeightWithSpacing();
float imgui_GetFrameHeight();
float imgui_GetFrameHeightWithSpacing();
void imgui_PushID1(const char* str_id);
void imgui_PushID2(const char* str_id_begin, const char* str_id_end);
void imgui_PushID3(const void* ptr_id);
void imgui_PushID4(int int_id);
void imgui_PopID();
ImGuiID imgui_GetID1(const char* str_id);
ImGuiID imgui_GetID2(const char* str_id_begin, const char* str_id_end);
ImGuiID imgui_GetID3(const void* ptr_id);
void imgui_TextUnformatted(const char* text, const char* text_end);
void imgui_Text(const char* fmt, ...);
void imgui_TextV(const char* fmt, va_list args);
void imgui_TextColored(const ImVec4* col, const char* fmt, ...);
void imgui_TextColoredV(const ImVec4* col, const char* fmt, va_list args);
void imgui_TextDisabled(const char* fmt, ...);
void imgui_TextDisabledV(const char* fmt, va_list args);
void imgui_TextWrapped(const char* fmt, ...);
void imgui_TextWrappedV(const char* fmt, va_list args);
void imgui_LabelText(const char* label, const char* fmt, ...);
void imgui_LabelTextV(const char* label, const char* fmt, va_list args);
void imgui_BulletText(const char* fmt, ...);
void imgui_BulletTextV(const char* fmt, va_list args);
bool imgui_Button(const char* label, const ImVec2* size);
bool imgui_SmallButton(const char* label);
bool imgui_InvisibleButton(const char* str_id, const ImVec2* size, ImGuiButtonFlags flags);
bool imgui_ArrowButton(const char* str_id, ImGuiDir dir);
void imgui_Image(ImTextureID user_texture_id, const ImVec2* size, const ImVec2* uv0, const ImVec2* uv1, const ImVec4* tint_col, const ImVec4* border_col);
bool imgui_ImageButton(ImTextureID user_texture_id, const ImVec2* size, const ImVec2* uv0, const ImVec2* uv1, int frame_padding, const ImVec4* bg_col, const ImVec4* tint_col);
bool imgui_Checkbox(const char* label, bool* v);
bool imgui_CheckboxFlags1(const char* label, int* flags, int flags_value);
bool imgui_CheckboxFlags2(const char* label, unsigned int* flags, unsigned int flags_value);
bool imgui_RadioButton1(const char* label, bool active);
bool imgui_RadioButton2(const char* label, int* v, int v_button);
void imgui_ProgressBar(float fraction, const ImVec2* size_arg, const char* overlay);
void imgui_Bullet();
bool imgui_BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags);
void imgui_EndCombo();
bool imgui_Combo1(const char* label, int* current_item, const char*const items[], int items_count, int popup_max_height_in_items);
bool imgui_Combo2(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items);
bool imgui_Combo3(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int popup_max_height_in_items);
bool imgui_DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, ImGuiSliderFlags flags);
bool imgui_DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max, ImGuiSliderFlags flags);
bool imgui_DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
bool imgui_VSliderFloat(const char* label, const ImVec2* size, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_VSliderInt(const char* label, const ImVec2* size, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_VSliderScalar(const char* label, const ImVec2* size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
bool imgui_InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
bool imgui_InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2* size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
bool imgui_InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data);
bool imgui_InputFloat(const char* label, float* v, float step, float step_fast, const char* format, ImGuiInputTextFlags flags);
bool imgui_InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags flags);
bool imgui_InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags flags);
bool imgui_InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags flags);
bool imgui_InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags flags);
bool imgui_InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags);
bool imgui_InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags);
bool imgui_InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags);
bool imgui_InputDouble(const char* label, double* v, double step, double step_fast, const char* format, ImGuiInputTextFlags flags);
bool imgui_InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags);
bool imgui_InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags);
bool imgui_ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags);
bool imgui_ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags);
bool imgui_ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags);
bool imgui_ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col);
bool imgui_ColorButton(const char* desc_id, const ImVec4* col, ImGuiColorEditFlags flags, ImVec2 size);
void imgui_SetColorEditOptions(ImGuiColorEditFlags flags);
bool imgui_TreeNode1(const char* label);
bool imgui_TreeNode2(const char* str_id, const char* fmt, ...);
bool imgui_TreeNode3(const void* ptr_id, const char* fmt, ...);
bool imgui_TreeNodeV1(const char* str_id, const char* fmt, va_list args);
bool imgui_TreeNodeV2(const void* ptr_id, const char* fmt, va_list args);
bool imgui_TreeNodeEx1(const char* label, ImGuiTreeNodeFlags flags);
bool imgui_TreeNodeEx2(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...);
bool imgui_TreeNodeEx3(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...);
bool imgui_TreeNodeExV1(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);
bool imgui_TreeNodeExV2(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);
void imgui_TreePush1(const char* str_id);
void imgui_TreePush2(const void* ptr_id);
void imgui_TreePop();
float imgui_GetTreeNodeToLabelSpacing();
bool imgui_CollapsingHeader1(const char* label, ImGuiTreeNodeFlags flags);
bool imgui_CollapsingHeader2(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags);
void imgui_SetNextItemOpen(bool is_open, ImGuiCond cond);
bool imgui_Selectable1(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2* size);
bool imgui_Selectable2(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2* size);
bool imgui_ListBox1(const char* label, int* current_item, const char*const items[], int items_count, int height_in_items);
bool imgui_ListBox2(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items);
bool imgui_ListBoxHeader1(const char* label, const ImVec2* size);
bool imgui_ListBoxHeader2(const char* label, int items_count, int height_in_items);
void imgui_ListBoxFooter();
void imgui_PlotLines1(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride);
void imgui_PlotLines2(const char* label, float (*values_getter)(void*, int), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size);
void imgui_PlotHistogram1(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride);
void imgui_PlotHistogram2(const char* label, float (*values_getter)(void*, int), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size);
void imgui_Value1(const char* prefix, bool b);
void imgui_Value2(const char* prefix, int v);
void imgui_Value3(const char* prefix, unsigned int v);
void imgui_Value4(const char* prefix, float v, const char* float_format);
bool imgui_BeginMenuBar();
void imgui_EndMenuBar();
bool imgui_BeginMainMenuBar();
void imgui_EndMainMenuBar();
bool imgui_BeginMenu(const char* label, bool enabled);
void imgui_EndMenu();
bool imgui_MenuItem1(const char* label, const char* shortcut, bool selected, bool enabled);
bool imgui_MenuItem2(const char* label, const char* shortcut, bool* p_selected, bool enabled);
void imgui_BeginTooltip();
void imgui_EndTooltip();
void imgui_SetTooltip(const char* fmt, ...);
void imgui_SetTooltipV(const char* fmt, va_list args);
bool imgui_BeginPopup(const char* str_id, ImGuiWindowFlags flags);
bool imgui_BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags);
void imgui_EndPopup();
void imgui_OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags);
void imgui_OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags);
void imgui_CloseCurrentPopup();
bool imgui_BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags);
bool imgui_BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags);
bool imgui_BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags);
bool imgui_IsPopupOpen(const char* str_id, ImGuiPopupFlags flags);
bool imgui_BeginTable(const char* str_id, int column, ImGuiTableFlags flags, const ImVec2* outer_size, float inner_width);
void imgui_EndTable();
void imgui_TableNextRow(ImGuiTableRowFlags row_flags, float min_row_height);
bool imgui_TableNextColumn();
bool imgui_TableSetColumnIndex(int column_n);
void imgui_TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImU32 user_id);
void imgui_TableSetupScrollFreeze(int cols, int rows);
void imgui_TableHeadersRow();
void imgui_TableHeader(const char* label);
ImGuiTableSortSpecs * imgui_TableGetSortSpecs();
int imgui_TableGetColumnCount();
int imgui_TableGetColumnIndex();
int imgui_TableGetRowIndex();
const char * imgui_TableGetColumnName(int column_n);
ImGuiTableColumnFlags imgui_TableGetColumnFlags(int column_n);
void imgui_TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n);
void imgui_Columns(int count, const char* id, bool border);
void imgui_NextColumn();
int imgui_GetColumnIndex();
float imgui_GetColumnWidth(int column_index);
void imgui_SetColumnWidth(int column_index, float width);
float imgui_GetColumnOffset(int column_index);
void imgui_SetColumnOffset(int column_index, float offset_x);
int imgui_GetColumnsCount();
bool imgui_BeginTabBar(const char* str_id, ImGuiTabBarFlags flags);
void imgui_EndTabBar();
bool imgui_BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags);
void imgui_EndTabItem();
bool imgui_TabItemButton(const char* label, ImGuiTabItemFlags flags);
void imgui_SetTabItemClosed(const char* tab_or_docked_window_label);
void imgui_DockSpace(ImGuiID id, const ImVec2* size, ImGuiDockNodeFlags flags, const ImGuiWindowClass* window_class);
ImGuiID imgui_DockSpaceOverViewport(ImGuiViewport* viewport, ImGuiDockNodeFlags flags, const ImGuiWindowClass* window_class);
void imgui_SetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond);
void imgui_SetNextWindowClass(const ImGuiWindowClass* window_class);
ImGuiID imgui_GetWindowDockID();
bool imgui_IsWindowDocked();
void imgui_LogToTTY(int auto_open_depth);
void imgui_LogToFile(int auto_open_depth, const char* filename);
void imgui_LogToClipboard(int auto_open_depth);
void imgui_LogFinish();
void imgui_LogButtons();
void imgui_LogText(const char* fmt, ...);
bool imgui_BeginDragDropSource(ImGuiDragDropFlags flags);
bool imgui_SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond);
void imgui_EndDragDropSource();
bool imgui_BeginDragDropTarget();
const ImGuiPayload * imgui_AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags);
void imgui_EndDragDropTarget();
const ImGuiPayload * imgui_GetDragDropPayload();
void imgui_PushClipRect(const ImVec2* clip_rect_min, const ImVec2* clip_rect_max, bool intersect_with_current_clip_rect);
void imgui_PopClipRect();
void imgui_SetItemDefaultFocus();
void imgui_SetKeyboardFocusHere(int offset);
bool imgui_IsItemHovered(ImGuiHoveredFlags flags);
bool imgui_IsItemActive();
bool imgui_IsItemFocused();
bool imgui_IsItemClicked(ImGuiMouseButton mouse_button);
bool imgui_IsItemVisible();
bool imgui_IsItemEdited();
bool imgui_IsItemActivated();
bool imgui_IsItemDeactivated();
bool imgui_IsItemDeactivatedAfterEdit();
bool imgui_IsItemToggledOpen();
bool imgui_IsAnyItemHovered();
bool imgui_IsAnyItemActive();
bool imgui_IsAnyItemFocused();
ImVec2 imgui_GetItemRectMin();
ImVec2 imgui_GetItemRectMax();
ImVec2 imgui_GetItemRectSize();
void imgui_SetItemAllowOverlap();
bool imgui_IsRectVisible1(const ImVec2* size);
bool imgui_IsRectVisible2(const ImVec2* rect_min, const ImVec2* rect_max);
double imgui_GetTime();
int imgui_GetFrameCount();
ImDrawList * imgui_GetBackgroundDrawList1();
ImDrawList * imgui_GetForegroundDrawList1();
ImDrawList * imgui_GetBackgroundDrawList2(ImGuiViewport* viewport);
ImDrawList * imgui_GetForegroundDrawList2(ImGuiViewport* viewport);
ImDrawListSharedData * imgui_GetDrawListSharedData();
const char * imgui_GetStyleColorName(ImGuiCol idx);
void imgui_SetStateStorage(ImGuiStorage* storage);
ImGuiStorage * imgui_GetStateStorage();
void imgui_CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);
bool imgui_BeginChildFrame(ImGuiID id, const ImVec2* size, ImGuiWindowFlags flags);
void imgui_EndChildFrame();
ImVec2 imgui_CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width);
ImVec4 imgui_ColorConvertU32ToFloat4(ImU32 _in);
ImU32 imgui_ColorConvertFloat4ToU32(const ImVec4* _in);
void imgui_ColorConvertRGBtoHSV(float r, float g, float b, float* out_h, float* out_s, float* out_v);
void imgui_ColorConvertHSVtoRGB(float h, float s, float v, float* out_r, float* out_g, float* out_b);
int imgui_GetKeyIndex(ImGuiKey imgui_key);
bool imgui_IsKeyDown(int user_key_index);
bool imgui_IsKeyPressed(int user_key_index, bool _repeat);
bool imgui_IsKeyReleased(int user_key_index);
int imgui_GetKeyPressedAmount(int key_index, float repeat_delay, float rate);
void imgui_CaptureKeyboardFromApp(bool want_capture_keyboard_value);
bool imgui_IsMouseDown(ImGuiMouseButton button);
bool imgui_IsMouseClicked(ImGuiMouseButton button, bool _repeat);
bool imgui_IsMouseReleased(ImGuiMouseButton button);
bool imgui_IsMouseDoubleClicked(ImGuiMouseButton button);
bool imgui_IsMouseHoveringRect(const ImVec2* r_min, const ImVec2* r_max, bool clip);
bool imgui_IsMousePosValid(const ImVec2* mouse_pos);
bool imgui_IsAnyMouseDown();
ImVec2 imgui_GetMousePos();
ImVec2 imgui_GetMousePosOnOpeningCurrentPopup();
bool imgui_IsMouseDragging(ImGuiMouseButton button, float lock_threshold);
ImVec2 imgui_GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold);
void imgui_ResetMouseDragDelta(ImGuiMouseButton button);
ImGuiMouseCursor imgui_GetMouseCursor();
void imgui_SetMouseCursor(ImGuiMouseCursor cursor_type);
void imgui_CaptureMouseFromApp(bool want_capture_mouse_value);
const char * imgui_GetClipboardText();
void imgui_SetClipboardText(const char* text);
bool imgui_DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx);
ImGuiPlatformIO & imgui_GetPlatformIO();
ImGuiViewport * imgui_GetMainViewport();
void imgui_UpdatePlatformWindows();
void imgui_RenderPlatformWindowsDefault(void* platform_render_arg, void* renderer_render_arg);
void imgui_DestroyPlatformWindows();
ImGuiViewport * imgui_FindViewportByID(ImGuiID id);
ImGuiViewport * imgui_FindViewportByPlatformHandle(void* platform_handle);

typedef enum {
  ImGuiWindowFlags_None = 0,
  ImGuiWindowFlags_NoTitleBar = 1 << 0,
  ImGuiWindowFlags_NoResize = 1 << 1,
  ImGuiWindowFlags_NoMove = 1 << 2,
  ImGuiWindowFlags_NoScrollbar = 1 << 3,
  ImGuiWindowFlags_NoScrollWithMouse = 1 << 4,
  ImGuiWindowFlags_NoCollapse = 1 << 5,
  ImGuiWindowFlags_AlwaysAutoResize = 1 << 6,
  ImGuiWindowFlags_NoBackground = 1 << 7,
  ImGuiWindowFlags_NoSavedSettings = 1 << 8,
  ImGuiWindowFlags_NoMouseInputs = 1 << 9,
  ImGuiWindowFlags_MenuBar = 1 << 10,
  ImGuiWindowFlags_HorizontalScrollbar = 1 << 11,
  ImGuiWindowFlags_NoFocusOnAppearing = 1 << 12,
  ImGuiWindowFlags_NoBringToFrontOnFocus = 1 << 13,
  ImGuiWindowFlags_AlwaysVerticalScrollbar = 1 << 14,
  ImGuiWindowFlags_AlwaysHorizontalScrollbar = 1<< 15,
  ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,
  ImGuiWindowFlags_NoNavInputs = 1 << 18,
  ImGuiWindowFlags_NoNavFocus = 1 << 19,
  ImGuiWindowFlags_UnsavedDocument = 1 << 20,
  ImGuiWindowFlags_NoDocking = 1 << 21,
  ImGuiWindowFlags_NoNav = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
  ImGuiWindowFlags_NoDecoration = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
  ImGuiWindowFlags_NoInputs = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
  ImGuiWindowFlags_NavFlattened = 1 << 23,
  ImGuiWindowFlags_ChildWindow = 1 << 24,
  ImGuiWindowFlags_Tooltip = 1 << 25,
  ImGuiWindowFlags_Popup = 1 << 26,
  ImGuiWindowFlags_Modal = 1 << 27,
  ImGuiWindowFlags_ChildMenu = 1 << 28,
  ImGuiWindowFlags_DockNodeHost = 1 << 29
} ImGuiWindowFlags_;

typedef enum {
  ImGuiInputTextFlags_None = 0,
  ImGuiInputTextFlags_CharsDecimal = 1 << 0,
  ImGuiInputTextFlags_CharsHexadecimal = 1 << 1,
  ImGuiInputTextFlags_CharsUppercase = 1 << 2,
  ImGuiInputTextFlags_CharsNoBlank = 1 << 3,
  ImGuiInputTextFlags_AutoSelectAll = 1 << 4,
  ImGuiInputTextFlags_EnterReturnsTrue = 1 << 5,
  ImGuiInputTextFlags_CallbackCompletion = 1 << 6,
  ImGuiInputTextFlags_CallbackHistory = 1 << 7,
  ImGuiInputTextFlags_CallbackAlways = 1 << 8,
  ImGuiInputTextFlags_CallbackCharFilter = 1 << 9,
  ImGuiInputTextFlags_AllowTabInput = 1 << 10,
  ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,
  ImGuiInputTextFlags_NoHorizontalScroll = 1 << 12,
  ImGuiInputTextFlags_AlwaysInsertMode = 1 << 13,
  ImGuiInputTextFlags_ReadOnly = 1 << 14,
  ImGuiInputTextFlags_Password = 1 << 15,
  ImGuiInputTextFlags_NoUndoRedo = 1 << 16,
  ImGuiInputTextFlags_CharsScientific = 1 << 17,
  ImGuiInputTextFlags_CallbackResize = 1 << 18,
  ImGuiInputTextFlags_CallbackEdit = 1 << 19,
  ImGuiInputTextFlags_Multiline = 1 << 20,
  ImGuiInputTextFlags_NoMarkEdited = 1 << 21
} ImGuiInputTextFlags_;

typedef enum {
  ImGuiTreeNodeFlags_None = 0,
  ImGuiTreeNodeFlags_Selected = 1 << 0,
  ImGuiTreeNodeFlags_Framed = 1 << 1,
  ImGuiTreeNodeFlags_AllowItemOverlap = 1 << 2,
  ImGuiTreeNodeFlags_NoTreePushOnOpen = 1 << 3,
  ImGuiTreeNodeFlags_NoAutoOpenOnLog = 1 << 4,
  ImGuiTreeNodeFlags_DefaultOpen = 1 << 5,
  ImGuiTreeNodeFlags_OpenOnDoubleClick = 1 << 6,
  ImGuiTreeNodeFlags_OpenOnArrow = 1 << 7,
  ImGuiTreeNodeFlags_Leaf = 1 << 8,
  ImGuiTreeNodeFlags_Bullet = 1 << 9,
  ImGuiTreeNodeFlags_FramePadding = 1 << 10,
  ImGuiTreeNodeFlags_SpanAvailWidth = 1 << 11,
  ImGuiTreeNodeFlags_SpanFullWidth = 1 << 12,
  ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,
  ImGuiTreeNodeFlags_CollapsingHeader = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog
} ImGuiTreeNodeFlags_;

typedef enum {
  ImGuiPopupFlags_None = 0,
  ImGuiPopupFlags_MouseButtonLeft = 0,
  ImGuiPopupFlags_MouseButtonRight = 1,
  ImGuiPopupFlags_MouseButtonMiddle = 2,
  ImGuiPopupFlags_MouseButtonMask_ = 0x1F,
  ImGuiPopupFlags_MouseButtonDefault_ = 1,
  ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 5,
  ImGuiPopupFlags_NoOpenOverItems = 1 << 6,
  ImGuiPopupFlags_AnyPopupId = 1 << 7,
  ImGuiPopupFlags_AnyPopupLevel = 1 << 8,
  ImGuiPopupFlags_AnyPopup = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel
} ImGuiPopupFlags_;

typedef enum {
  ImGuiSelectableFlags_None = 0,
  ImGuiSelectableFlags_DontClosePopups = 1 << 0,
  ImGuiSelectableFlags_SpanAllColumns = 1 << 1,
  ImGuiSelectableFlags_AllowDoubleClick = 1 << 2,
  ImGuiSelectableFlags_Disabled = 1 << 3,
  ImGuiSelectableFlags_AllowItemOverlap = 1 << 4
} ImGuiSelectableFlags_;

typedef enum {
  ImGuiComboFlags_None = 0,
  ImGuiComboFlags_PopupAlignLeft = 1 << 0,
  ImGuiComboFlags_HeightSmall = 1 << 1,
  ImGuiComboFlags_HeightRegular = 1 << 2,
  ImGuiComboFlags_HeightLarge = 1 << 3,
  ImGuiComboFlags_HeightLargest = 1 << 4,
  ImGuiComboFlags_NoArrowButton = 1 << 5,
  ImGuiComboFlags_NoPreview = 1 << 6,
  ImGuiComboFlags_HeightMask_ = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest
} ImGuiComboFlags_;

typedef enum {
  ImGuiTabBarFlags_None = 0,
  ImGuiTabBarFlags_Reorderable = 1 << 0,
  ImGuiTabBarFlags_AutoSelectNewTabs = 1 << 1,
  ImGuiTabBarFlags_TabListPopupButton = 1 << 2,
  ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 1 << 3,
  ImGuiTabBarFlags_NoTabListScrollingButtons = 1 << 4,
  ImGuiTabBarFlags_NoTooltip = 1 << 5,
  ImGuiTabBarFlags_FittingPolicyResizeDown = 1 << 6,
  ImGuiTabBarFlags_FittingPolicyScroll = 1 << 7,
  ImGuiTabBarFlags_FittingPolicyMask_ = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,
  ImGuiTabBarFlags_FittingPolicyDefault_ = ImGuiTabBarFlags_FittingPolicyResizeDown
} ImGuiTabBarFlags_;

typedef enum {
  ImGuiTabItemFlags_None = 0,
  ImGuiTabItemFlags_UnsavedDocument = 1 << 0,
  ImGuiTabItemFlags_SetSelected = 1 << 1,
  ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1 << 2,
  ImGuiTabItemFlags_NoPushId = 1 << 3,
  ImGuiTabItemFlags_NoTooltip = 1 << 4,
  ImGuiTabItemFlags_NoReorder = 1 << 5,
  ImGuiTabItemFlags_Leading = 1 << 6,
  ImGuiTabItemFlags_Trailing = 1 << 7
} ImGuiTabItemFlags_;

typedef enum {
  ImGuiTableFlags_None = 0,
  ImGuiTableFlags_Resizable = 1 << 0,
  ImGuiTableFlags_Reorderable = 1 << 1,
  ImGuiTableFlags_Hideable = 1 << 2,
  ImGuiTableFlags_Sortable = 1 << 3,
  ImGuiTableFlags_NoSavedSettings = 1 << 4,
  ImGuiTableFlags_ContextMenuInBody = 1 << 5,
  ImGuiTableFlags_RowBg = 1 << 6,
  ImGuiTableFlags_BordersInnerH = 1 << 7,
  ImGuiTableFlags_BordersOuterH = 1 << 8,
  ImGuiTableFlags_BordersInnerV = 1 << 9,
  ImGuiTableFlags_BordersOuterV = 1 << 10,
  ImGuiTableFlags_BordersH = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH,
  ImGuiTableFlags_BordersV = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV,
  ImGuiTableFlags_BordersInner = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH,
  ImGuiTableFlags_BordersOuter = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH,
  ImGuiTableFlags_Borders = ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter,
  ImGuiTableFlags_NoBordersInBody = 1 << 11,
  ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,
  ImGuiTableFlags_SizingFixedFit = 1 << 13,
  ImGuiTableFlags_SizingFixedSame = 2 << 13,
  ImGuiTableFlags_SizingStretchProp = 3 << 13,
  ImGuiTableFlags_SizingStretchSame = 4 << 13,
  ImGuiTableFlags_NoHostExtendX = 1 << 16,
  ImGuiTableFlags_NoHostExtendY = 1 << 17,
  ImGuiTableFlags_NoKeepColumnsVisible = 1 << 18,
  ImGuiTableFlags_PreciseWidths = 1 << 19,
  ImGuiTableFlags_NoClip = 1 << 20,
  ImGuiTableFlags_PadOuterX = 1 << 21,
  ImGuiTableFlags_NoPadOuterX = 1 << 22,
  ImGuiTableFlags_NoPadInnerX = 1 << 23,
  ImGuiTableFlags_ScrollX = 1 << 24,
  ImGuiTableFlags_ScrollY = 1 << 25,
  ImGuiTableFlags_SortMulti = 1 << 26,
  ImGuiTableFlags_SortTristate = 1 << 27,
  ImGuiTableFlags_SizingMask_ = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_SizingFixedSame | ImGuiTableFlags_SizingStretchProp | ImGuiTableFlags_SizingStretchSame
} ImGuiTableFlags_;

typedef enum {
  ImGuiTableColumnFlags_None = 0,
  ImGuiTableColumnFlags_DefaultHide = 1 << 0,
  ImGuiTableColumnFlags_DefaultSort = 1 << 1,
  ImGuiTableColumnFlags_WidthStretch = 1 << 2,
  ImGuiTableColumnFlags_WidthFixed = 1 << 3,
  ImGuiTableColumnFlags_NoResize = 1 << 4,
  ImGuiTableColumnFlags_NoReorder = 1 << 5,
  ImGuiTableColumnFlags_NoHide = 1 << 6,
  ImGuiTableColumnFlags_NoClip = 1 << 7,
  ImGuiTableColumnFlags_NoSort = 1 << 8,
  ImGuiTableColumnFlags_NoSortAscending = 1 << 9,
  ImGuiTableColumnFlags_NoSortDescending = 1 << 10,
  ImGuiTableColumnFlags_NoHeaderWidth = 1 << 11,
  ImGuiTableColumnFlags_PreferSortAscending = 1 << 12,
  ImGuiTableColumnFlags_PreferSortDescending = 1 << 13,
  ImGuiTableColumnFlags_IndentEnable = 1 << 14,
  ImGuiTableColumnFlags_IndentDisable = 1 << 15,
  ImGuiTableColumnFlags_IsEnabled = 1 << 20,
  ImGuiTableColumnFlags_IsVisible = 1 << 21,
  ImGuiTableColumnFlags_IsSorted = 1 << 22,
  ImGuiTableColumnFlags_IsHovered = 1 << 23,
  ImGuiTableColumnFlags_WidthMask_ = ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed,
  ImGuiTableColumnFlags_IndentMask_ = ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable,
  ImGuiTableColumnFlags_StatusMask_ = ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered,
  ImGuiTableColumnFlags_NoDirectResize_ = 1 << 30
} ImGuiTableColumnFlags_;

typedef enum {
  ImGuiTableRowFlags_None = 0,
  ImGuiTableRowFlags_Headers = 1 << 0
} ImGuiTableRowFlags_;

typedef enum {
  ImGuiTableBgTarget_None = 0,
  ImGuiTableBgTarget_RowBg0 = 1,
  ImGuiTableBgTarget_RowBg1 = 2,
  ImGuiTableBgTarget_CellBg = 3
} ImGuiTableBgTarget_;

typedef enum {
  ImGuiFocusedFlags_None = 0,
  ImGuiFocusedFlags_ChildWindows = 1 << 0,
  ImGuiFocusedFlags_RootWindow = 1 << 1,
  ImGuiFocusedFlags_AnyWindow = 1 << 2,
  ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows
} ImGuiFocusedFlags_;

typedef enum {
  ImGuiHoveredFlags_None = 0,
  ImGuiHoveredFlags_ChildWindows = 1 << 0,
  ImGuiHoveredFlags_RootWindow = 1 << 1,
  ImGuiHoveredFlags_AnyWindow = 1 << 2,
  ImGuiHoveredFlags_AllowWhenBlockedByPopup = 1 << 3,
  ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1 << 5,
  ImGuiHoveredFlags_AllowWhenOverlapped = 1 << 6,
  ImGuiHoveredFlags_AllowWhenDisabled = 1 << 7,
  ImGuiHoveredFlags_RectOnly = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
  ImGuiHoveredFlags_RootAndChildWindows = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows
} ImGuiHoveredFlags_;

typedef enum {
  ImGuiDockNodeFlags_None = 0,
  ImGuiDockNodeFlags_KeepAliveOnly = 1 << 0,
  ImGuiDockNodeFlags_NoDockingInCentralNode = 1 << 2,
  ImGuiDockNodeFlags_PassthruCentralNode = 1 << 3,
  ImGuiDockNodeFlags_NoSplit = 1 << 4,
  ImGuiDockNodeFlags_NoResize = 1 << 5,
  ImGuiDockNodeFlags_AutoHideTabBar = 1 << 6
} ImGuiDockNodeFlags_;

typedef enum {
  ImGuiDragDropFlags_None = 0,
  ImGuiDragDropFlags_SourceNoPreviewTooltip = 1 << 0,
  ImGuiDragDropFlags_SourceNoDisableHover = 1 << 1,
  ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1 << 2,
  ImGuiDragDropFlags_SourceAllowNullID = 1 << 3,
  ImGuiDragDropFlags_SourceExtern = 1 << 4,
  ImGuiDragDropFlags_SourceAutoExpirePayload = 1 << 5,
  ImGuiDragDropFlags_AcceptBeforeDelivery = 1 << 10,
  ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 1 << 11,
  ImGuiDragDropFlags_AcceptNoPreviewTooltip = 1 << 12,
  ImGuiDragDropFlags_AcceptPeekOnly = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect
} ImGuiDragDropFlags_;

typedef enum {
  ImGuiDataType_S8,
  ImGuiDataType_U8,
  ImGuiDataType_S16,
  ImGuiDataType_U16,
  ImGuiDataType_S32,
  ImGuiDataType_U32,
  ImGuiDataType_S64,
  ImGuiDataType_U64,
  ImGuiDataType_Float,
  ImGuiDataType_Double,
  ImGuiDataType_COUNT
} ImGuiDataType_;

typedef enum {
  ImGuiDir_None,
  ImGuiDir_Left,
  ImGuiDir_Right,
  ImGuiDir_Up,
  ImGuiDir_Down,
  ImGuiDir_COUNT
} ImGuiDir_;

typedef enum {
  ImGuiSortDirection_None = 0,
  ImGuiSortDirection_Ascending = 1,
  ImGuiSortDirection_Descending = 2
} ImGuiSortDirection_;

typedef enum {
  ImGuiKey_Tab,
  ImGuiKey_LeftArrow,
  ImGuiKey_RightArrow,
  ImGuiKey_UpArrow,
  ImGuiKey_DownArrow,
  ImGuiKey_PageUp,
  ImGuiKey_PageDown,
  ImGuiKey_Home,
  ImGuiKey_End,
  ImGuiKey_Insert,
  ImGuiKey_Delete,
  ImGuiKey_Backspace,
  ImGuiKey_Space,
  ImGuiKey_Enter,
  ImGuiKey_Escape,
  ImGuiKey_KeyPadEnter,
  ImGuiKey_A,
  ImGuiKey_C,
  ImGuiKey_V,
  ImGuiKey_X,
  ImGuiKey_Y,
  ImGuiKey_Z,
  ImGuiKey_COUNT
} ImGuiKey_;

typedef enum {
  ImGuiKeyModFlags_None = 0,
  ImGuiKeyModFlags_Ctrl = 1 << 0,
  ImGuiKeyModFlags_Shift = 1 << 1,
  ImGuiKeyModFlags_Alt = 1 << 2,
  ImGuiKeyModFlags_Super = 1 << 3
} ImGuiKeyModFlags_;

typedef enum {
  ImGuiNavInput_Activate,
  ImGuiNavInput_Cancel,
  ImGuiNavInput_Input,
  ImGuiNavInput_Menu,
  ImGuiNavInput_DpadLeft,
  ImGuiNavInput_DpadRight,
  ImGuiNavInput_DpadUp,
  ImGuiNavInput_DpadDown,
  ImGuiNavInput_LStickLeft,
  ImGuiNavInput_LStickRight,
  ImGuiNavInput_LStickUp,
  ImGuiNavInput_LStickDown,
  ImGuiNavInput_FocusPrev,
  ImGuiNavInput_FocusNext,
  ImGuiNavInput_TweakSlow,
  ImGuiNavInput_TweakFast,
  ImGuiNavInput_KeyMenu_,
  ImGuiNavInput_KeyLeft_,
  ImGuiNavInput_KeyRight_,
  ImGuiNavInput_KeyUp_,
  ImGuiNavInput_KeyDown_,
  ImGuiNavInput_COUNT,
  ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_
} ImGuiNavInput_;

typedef enum {
  ImGuiConfigFlags_None = 0,
  ImGuiConfigFlags_NavEnableKeyboard = 1 << 0,
  ImGuiConfigFlags_NavEnableGamepad = 1 << 1,
  ImGuiConfigFlags_NavEnableSetMousePos = 1 << 2,
  ImGuiConfigFlags_NavNoCaptureKeyboard = 1 << 3,
  ImGuiConfigFlags_NoMouse = 1 << 4,
  ImGuiConfigFlags_NoMouseCursorChange = 1 << 5,
  ImGuiConfigFlags_DockingEnable = 1 << 6,
  ImGuiConfigFlags_ViewportsEnable = 1 << 10,
  ImGuiConfigFlags_DpiEnableScaleViewports = 1 << 14,
  ImGuiConfigFlags_DpiEnableScaleFonts = 1 << 15,
  ImGuiConfigFlags_IsSRGB = 1 << 20,
  ImGuiConfigFlags_IsTouchScreen = 1 << 21
} ImGuiConfigFlags_;

typedef enum {
  ImGuiBackendFlags_None = 0,
  ImGuiBackendFlags_HasGamepad = 1 << 0,
  ImGuiBackendFlags_HasMouseCursors = 1 << 1,
  ImGuiBackendFlags_HasSetMousePos = 1 << 2,
  ImGuiBackendFlags_RendererHasVtxOffset = 1 << 3,
  ImGuiBackendFlags_PlatformHasViewports = 1 << 10,
  ImGuiBackendFlags_HasMouseHoveredViewport = 1 << 11,
  ImGuiBackendFlags_RendererHasViewports = 1 << 12
} ImGuiBackendFlags_;

typedef enum {
  ImGuiCol_Text,
  ImGuiCol_TextDisabled,
  ImGuiCol_WindowBg,
  ImGuiCol_ChildBg,
  ImGuiCol_PopupBg,
  ImGuiCol_Border,
  ImGuiCol_BorderShadow,
  ImGuiCol_FrameBg,
  ImGuiCol_FrameBgHovered,
  ImGuiCol_FrameBgActive,
  ImGuiCol_TitleBg,
  ImGuiCol_TitleBgActive,
  ImGuiCol_TitleBgCollapsed,
  ImGuiCol_MenuBarBg,
  ImGuiCol_ScrollbarBg,
  ImGuiCol_ScrollbarGrab,
  ImGuiCol_ScrollbarGrabHovered,
  ImGuiCol_ScrollbarGrabActive,
  ImGuiCol_CheckMark,
  ImGuiCol_SliderGrab,
  ImGuiCol_SliderGrabActive,
  ImGuiCol_Button,
  ImGuiCol_ButtonHovered,
  ImGuiCol_ButtonActive,
  ImGuiCol_Header,
  ImGuiCol_HeaderHovered,
  ImGuiCol_HeaderActive,
  ImGuiCol_Separator,
  ImGuiCol_SeparatorHovered,
  ImGuiCol_SeparatorActive,
  ImGuiCol_ResizeGrip,
  ImGuiCol_ResizeGripHovered,
  ImGuiCol_ResizeGripActive,
  ImGuiCol_Tab,
  ImGuiCol_TabHovered,
  ImGuiCol_TabActive,
  ImGuiCol_TabUnfocused,
  ImGuiCol_TabUnfocusedActive,
  ImGuiCol_DockingPreview,
  ImGuiCol_DockingEmptyBg,
  ImGuiCol_PlotLines,
  ImGuiCol_PlotLinesHovered,
  ImGuiCol_PlotHistogram,
  ImGuiCol_PlotHistogramHovered,
  ImGuiCol_TableHeaderBg,
  ImGuiCol_TableBorderStrong,
  ImGuiCol_TableBorderLight,
  ImGuiCol_TableRowBg,
  ImGuiCol_TableRowBgAlt,
  ImGuiCol_TextSelectedBg,
  ImGuiCol_DragDropTarget,
  ImGuiCol_NavHighlight,
  ImGuiCol_NavWindowingHighlight,
  ImGuiCol_NavWindowingDimBg,
  ImGuiCol_ModalWindowDimBg,
  ImGuiCol_COUNT
} ImGuiCol_;

typedef enum {
  ImGuiStyleVar_Alpha,
  ImGuiStyleVar_WindowPadding,
  ImGuiStyleVar_WindowRounding,
  ImGuiStyleVar_WindowBorderSize,
  ImGuiStyleVar_WindowMinSize,
  ImGuiStyleVar_WindowTitleAlign,
  ImGuiStyleVar_ChildRounding,
  ImGuiStyleVar_ChildBorderSize,
  ImGuiStyleVar_PopupRounding,
  ImGuiStyleVar_PopupBorderSize,
  ImGuiStyleVar_FramePadding,
  ImGuiStyleVar_FrameRounding,
  ImGuiStyleVar_FrameBorderSize,
  ImGuiStyleVar_ItemSpacing,
  ImGuiStyleVar_ItemInnerSpacing,
  ImGuiStyleVar_IndentSpacing,
  ImGuiStyleVar_CellPadding,
  ImGuiStyleVar_ScrollbarSize,
  ImGuiStyleVar_ScrollbarRounding,
  ImGuiStyleVar_GrabMinSize,
  ImGuiStyleVar_GrabRounding,
  ImGuiStyleVar_TabRounding,
  ImGuiStyleVar_ButtonTextAlign,
  ImGuiStyleVar_SelectableTextAlign,
  ImGuiStyleVar_COUNT
} ImGuiStyleVar_;

typedef enum {
  ImGuiButtonFlags_None = 0,
  ImGuiButtonFlags_MouseButtonLeft = 1 << 0,
  ImGuiButtonFlags_MouseButtonRight = 1 << 1,
  ImGuiButtonFlags_MouseButtonMiddle = 1 << 2,
  ImGuiButtonFlags_MouseButtonMask_ = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle,
  ImGuiButtonFlags_MouseButtonDefault_ = ImGuiButtonFlags_MouseButtonLeft
} ImGuiButtonFlags_;

typedef enum {
  ImGuiColorEditFlags_None = 0,
  ImGuiColorEditFlags_NoAlpha = 1 << 1,
  ImGuiColorEditFlags_NoPicker = 1 << 2,
  ImGuiColorEditFlags_NoOptions = 1 << 3,
  ImGuiColorEditFlags_NoSmallPreview = 1 << 4,
  ImGuiColorEditFlags_NoInputs = 1 << 5,
  ImGuiColorEditFlags_NoTooltip = 1 << 6,
  ImGuiColorEditFlags_NoLabel = 1 << 7,
  ImGuiColorEditFlags_NoSidePreview = 1 << 8,
  ImGuiColorEditFlags_NoDragDrop = 1 << 9,
  ImGuiColorEditFlags_NoBorder = 1 << 10,
  ImGuiColorEditFlags_AlphaBar = 1 << 16,
  ImGuiColorEditFlags_AlphaPreview = 1 << 17,
  ImGuiColorEditFlags_AlphaPreviewHalf = 1 << 18,
  ImGuiColorEditFlags_HDR = 1 << 19,
  ImGuiColorEditFlags_DisplayRGB = 1 << 20,
  ImGuiColorEditFlags_DisplayHSV = 1 << 21,
  ImGuiColorEditFlags_DisplayHex = 1 << 22,
  ImGuiColorEditFlags_Uint8 = 1 << 23,
  ImGuiColorEditFlags_Float = 1 << 24,
  ImGuiColorEditFlags_PickerHueBar = 1 << 25,
  ImGuiColorEditFlags_PickerHueWheel = 1 << 26,
  ImGuiColorEditFlags_InputRGB = 1 << 27,
  ImGuiColorEditFlags_InputHSV = 1 << 28,
  ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar,
  ImGuiColorEditFlags__DisplayMask = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex,
  ImGuiColorEditFlags__DataTypeMask = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,
  ImGuiColorEditFlags__PickerMask = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar,
  ImGuiColorEditFlags__InputMask = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV
} ImGuiColorEditFlags_;

typedef enum {
  ImGuiSliderFlags_None = 0,
  ImGuiSliderFlags_AlwaysClamp = 1 << 4,
  ImGuiSliderFlags_Logarithmic = 1 << 5,
  ImGuiSliderFlags_NoRoundToFormat = 1 << 6,
  ImGuiSliderFlags_NoInput = 1 << 7,
  ImGuiSliderFlags_InvalidMask_ = 0x7000000F
} ImGuiSliderFlags_;

typedef enum {
  ImGuiMouseButton_Left = 0,
  ImGuiMouseButton_Right = 1,
  ImGuiMouseButton_Middle = 2,
  ImGuiMouseButton_COUNT = 5
} ImGuiMouseButton_;

typedef enum {
  ImGuiMouseCursor_None,
  ImGuiMouseCursor_Arrow,
  ImGuiMouseCursor_TextInput,
  ImGuiMouseCursor_ResizeAll,
  ImGuiMouseCursor_ResizeNS,
  ImGuiMouseCursor_ResizeEW,
  ImGuiMouseCursor_ResizeNESW,
  ImGuiMouseCursor_ResizeNWSE,
  ImGuiMouseCursor_Hand,
  ImGuiMouseCursor_NotAllowed,
  ImGuiMouseCursor_COUNT
} ImGuiMouseCursor_;

typedef enum {
  ImGuiCond_None = 0,
  ImGuiCond_Always = 1 << 0,
  ImGuiCond_Once = 1 << 1,
  ImGuiCond_FirstUseEver = 1 << 2,
  ImGuiCond_Appearing = 1 << 3
} ImGuiCond_;
typedef struct ImNewWrapper {
} ImNewWrapper;
typedef struct ImGuiStyle {
  float Alpha;
  ImVec2 WindowPadding;
  float WindowRounding;
  float WindowBorderSize;
  ImVec2 WindowMinSize;
  ImVec2 WindowTitleAlign;
  ImGuiDir WindowMenuButtonPosition;
  float ChildRounding;
  float ChildBorderSize;
  float PopupRounding;
  float PopupBorderSize;
  ImVec2 FramePadding;
  float FrameRounding;
  float FrameBorderSize;
  ImVec2 ItemSpacing;
  ImVec2 ItemInnerSpacing;
  ImVec2 CellPadding;
  ImVec2 TouchExtraPadding;
  float IndentSpacing;
  float ColumnsMinSpacing;
  float ScrollbarSize;
  float ScrollbarRounding;
  float GrabMinSize;
  float GrabRounding;
  float LogSliderDeadzone;
  float TabRounding;
  float TabBorderSize;
  float TabMinWidthForCloseButton;
  ImGuiDir ColorButtonPosition;
  ImVec2 ButtonTextAlign;
  ImVec2 SelectableTextAlign;
  ImVec2 DisplayWindowPadding;
  ImVec2 DisplaySafeAreaPadding;
  float MouseCursorScale;
  bool AntiAliasedLines;
  bool AntiAliasedLinesUseTex;
  bool AntiAliasedFill;
  float CurveTessellationTol;
  float CircleSegmentMaxError;
  ImVec4 Colors[55];
} ImGuiStyle;
// void imgui_ImGuiStyle();
void imgui_ImGuiStyle_ScaleAllSizes(ImGuiStyle* ImGuiStyle_ctx, float scale_factor);
typedef struct ImGuiIO {
  ImGuiConfigFlags ConfigFlags;
  ImGuiBackendFlags BackendFlags;
  ImVec2 DisplaySize;
  float DeltaTime;
  float IniSavingRate;
  const char* IniFilename;
  const char* LogFilename;
  float MouseDoubleClickTime;
  float MouseDoubleClickMaxDist;
  float MouseDragThreshold;
  int KeyMap[22];
  float KeyRepeatDelay;
  float KeyRepeatRate;
  void* UserData;
  ImFontAtlas* Fonts;
  float FontGlobalScale;
  bool FontAllowUserScaling;
  ImFont* FontDefault;
  ImVec2 DisplayFramebufferScale;
  bool ConfigDockingNoSplit;
  bool ConfigDockingWithShift;
  bool ConfigDockingAlwaysTabBar;
  bool ConfigDockingTransparentPayload;
  bool ConfigViewportsNoAutoMerge;
  bool ConfigViewportsNoTaskBarIcon;
  bool ConfigViewportsNoDecoration;
  bool ConfigViewportsNoDefaultParent;
  bool MouseDrawCursor;
  bool ConfigMacOSXBehaviors;
  bool ConfigInputTextCursorBlink;
  bool ConfigDragClickToInputText;
  bool ConfigWindowsResizeFromEdges;
  bool ConfigWindowsMoveFromTitleBarOnly;
  float ConfigMemoryCompactTimer;
  const char* BackendPlatformName;
  const char* BackendRendererName;
  void* BackendPlatformUserData;
  void* BackendRendererUserData;
  void* BackendLanguageUserData;
  void* GetClipboardTextFn; // complex callback: const char *(*)(void *) - 
  void* SetClipboardTextFn; // complex callback: void (*)(void *, const char *) - 
  void* ClipboardUserData;
  ImVec2 MousePos;
  bool MouseDown[5];
  float MouseWheel;
  float MouseWheelH;
  ImGuiID MouseHoveredViewport;
  bool KeyCtrl;
  bool KeyShift;
  bool KeyAlt;
  bool KeySuper;
  bool KeysDown[512];
  float NavInputs[21];
  bool WantCaptureMouse;
  bool WantCaptureKeyboard;
  bool WantTextInput;
  bool WantSetMousePos;
  bool WantSaveIniSettings;
  bool NavActive;
  bool NavVisible;
  float Framerate;
  int MetricsRenderVertices;
  int MetricsRenderIndices;
  int MetricsRenderWindows;
  int MetricsActiveWindows;
  int MetricsActiveAllocations;
  ImVec2 MouseDelta;
  ImGuiKeyModFlags KeyMods;
  ImVec2 MousePosPrev;
  ImVec2 MouseClickedPos[5];
  double MouseClickedTime[5];
  bool MouseClicked[5];
  bool MouseDoubleClicked[5];
  bool MouseReleased[5];
  bool MouseDownOwned[5];
  bool MouseDownWasDoubleClick[5];
  float MouseDownDuration[5];
  float MouseDownDurationPrev[5];
  ImVec2 MouseDragMaxDistanceAbs[5];
  float MouseDragMaxDistanceSqr[5];
  float KeysDownDuration[512];
  float KeysDownDurationPrev[512];
  float NavInputsDownDuration[21];
  float NavInputsDownDurationPrev[21];
  float PenPressure;
  ImWchar16 InputQueueSurrogate;
  ImVector InputQueueCharacters;
} ImGuiIO;
void imgui_ImGuiIO_AddInputCharacter(ImGuiIO* ImGuiIO_ctx, unsigned int c);
void imgui_ImGuiIO_AddInputCharacterUTF16(ImGuiIO* ImGuiIO_ctx, ImWchar16 c);
void imgui_ImGuiIO_AddInputCharactersUTF8(ImGuiIO* ImGuiIO_ctx, const char* str);
void imgui_ImGuiIO_ClearInputCharacters(ImGuiIO* ImGuiIO_ctx);
// void imgui_ImGuiIO();
typedef struct ImGuiInputTextCallbackData {
  ImGuiInputTextFlags EventFlag;
  ImGuiInputTextFlags Flags;
  void* UserData;
  ImWchar EventChar;
  ImGuiKey EventKey;
  char* Buf;
  int BufTextLen;
  int BufSize;
  bool BufDirty;
  int CursorPos;
  int SelectionStart;
  int SelectionEnd;
} ImGuiInputTextCallbackData;
// void imgui_ImGuiInputTextCallbackData();
void imgui_ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ctx, int pos, int bytes_count);
void imgui_ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ctx, int pos, const char* text, const char* text_end);
void imgui_ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ctx);
void imgui_ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ctx);
bool imgui_ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ctx);
typedef struct ImGuiSizeCallbackData {
  void* UserData;
  ImVec2 Pos;
  ImVec2 CurrentSize;
  ImVec2 DesiredSize;
} ImGuiSizeCallbackData;
typedef struct ImGuiWindowClass {
  ImGuiID ClassId;
  ImGuiID ParentViewportId;
  ImGuiViewportFlags ViewportFlagsOverrideSet;
  ImGuiViewportFlags ViewportFlagsOverrideClear;
  ImGuiTabItemFlags TabItemFlagsOverrideSet;
  ImGuiDockNodeFlags DockNodeFlagsOverrideSet;
  ImGuiDockNodeFlags DockNodeFlagsOverrideClear;
  bool DockingAlwaysTabBar;
  bool DockingAllowUnclassed;
} ImGuiWindowClass;
// void imgui_ImGuiWindowClass();
typedef struct ImGuiPayload {
  void* Data;
  int DataSize;
  ImGuiID SourceId;
  ImGuiID SourceParentId;
  int DataFrameCount;
  char DataType[33];
  bool Preview;
  bool Delivery;
} ImGuiPayload;
// void imgui_ImGuiPayload();
void imgui_ImGuiPayload_Clear(ImGuiPayload* ImGuiPayload_ctx);
bool imgui_ImGuiPayload_IsDataType(ImGuiPayload* ImGuiPayload_ctx, const char* type);
bool imgui_ImGuiPayload_IsPreview(ImGuiPayload* ImGuiPayload_ctx);
bool imgui_ImGuiPayload_IsDelivery(ImGuiPayload* ImGuiPayload_ctx);
typedef struct ImGuiTableColumnSortSpecs {
  ImGuiID ColumnUserID;
  ImS16 ColumnIndex;
  ImS16 SortOrder;
  ImGuiSortDirection SortDirection;
} ImGuiTableColumnSortSpecs;
// void imgui_ImGuiTableColumnSortSpecs();
typedef struct ImGuiTableSortSpecs {
  const ImGuiTableColumnSortSpecs* Specs;
  int SpecsCount;
  bool SpecsDirty;
} ImGuiTableSortSpecs;
// void imgui_ImGuiTableSortSpecs();
typedef struct ImGuiTextFilter {
  
struct ImGuiTextRange {
    const char* b;
    const char* e;
  };
  char InputBuf[256];
  ImVector Filters;
  int CountGrep;
} ImGuiTextFilter;
// void imgui_ImGuiTextFilter(const char* default_filter);
bool imgui_ImGuiTextFilter_Draw(ImGuiTextFilter* ImGuiTextFilter_ctx, const char* label, float width);
bool imgui_ImGuiTextFilter_PassFilter(ImGuiTextFilter* ImGuiTextFilter_ctx, const char* text, const char* text_end);
void imgui_ImGuiTextFilter_Build(ImGuiTextFilter* ImGuiTextFilter_ctx);
void imgui_ImGuiTextFilter_Clear(ImGuiTextFilter* ImGuiTextFilter_ctx);
bool imgui_ImGuiTextFilter_IsActive(ImGuiTextFilter* ImGuiTextFilter_ctx);
typedef struct ImGuiTextBuffer {
  ImVector Buf;
} ImGuiTextBuffer;
// void imgui_ImGuiTextBuffer();
const char * imgui_ImGuiTextBuffer_begin(ImGuiTextBuffer* ImGuiTextBuffer_ctx);
const char * imgui_ImGuiTextBuffer_end(ImGuiTextBuffer* ImGuiTextBuffer_ctx);
int imgui_ImGuiTextBuffer_size(ImGuiTextBuffer* ImGuiTextBuffer_ctx);
bool imgui_ImGuiTextBuffer_empty(ImGuiTextBuffer* ImGuiTextBuffer_ctx);
void imgui_ImGuiTextBuffer_clear(ImGuiTextBuffer* ImGuiTextBuffer_ctx);
void imgui_ImGuiTextBuffer_reserve(ImGuiTextBuffer* ImGuiTextBuffer_ctx, int capacity);
const char * imgui_ImGuiTextBuffer_c_str(ImGuiTextBuffer* ImGuiTextBuffer_ctx);
void imgui_ImGuiTextBuffer_append(ImGuiTextBuffer* ImGuiTextBuffer_ctx, const char* str, const char* str_end);
void imgui_ImGuiTextBuffer_appendfv(ImGuiTextBuffer* ImGuiTextBuffer_ctx, const char* fmt, va_list args);
typedef struct ImGuiStorage {
  
struct ImGuiStoragePair {
    ImGuiID key;
    

  union {
      int val_i;
      float val_f;
      void* val_p;
    };
  };
  ImVector Data;
} ImGuiStorage;
void imgui_ImGuiStorage_Clear(ImGuiStorage* ImGuiStorage_ctx);
int imgui_ImGuiStorage_GetInt(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, int default_val);
void imgui_ImGuiStorage_SetInt(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, int val);
bool imgui_ImGuiStorage_GetBool(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, bool default_val);
void imgui_ImGuiStorage_SetBool(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, bool val);
float imgui_ImGuiStorage_GetFloat(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, float default_val);
void imgui_ImGuiStorage_SetFloat(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, float val);
void * imgui_ImGuiStorage_GetVoidPtr(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key);
void imgui_ImGuiStorage_SetVoidPtr(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, void* val);
int * imgui_ImGuiStorage_GetIntRef(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, int default_val);
bool * imgui_ImGuiStorage_GetBoolRef(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, bool default_val);
float * imgui_ImGuiStorage_GetFloatRef(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, float default_val);
void ** imgui_ImGuiStorage_GetVoidPtrRef(ImGuiStorage* ImGuiStorage_ctx, ImGuiID key, void* default_val);
void imgui_ImGuiStorage_SetAllInt(ImGuiStorage* ImGuiStorage_ctx, int val);
void imgui_ImGuiStorage_BuildSortByKey(ImGuiStorage* ImGuiStorage_ctx);
typedef struct ImGuiListClipper {
  int DisplayStart;
  int DisplayEnd;
  int ItemsCount;
  int StepNo;
  int ItemsFrozen;
  float ItemsHeight;
  float StartPosY;
} ImGuiListClipper;
// void imgui_ImGuiListClipper();
void imgui_ImGuiListClipper_Begin(ImGuiListClipper* ImGuiListClipper_ctx, int items_count, float items_height);
void imgui_ImGuiListClipper_End(ImGuiListClipper* ImGuiListClipper_ctx);
bool imgui_ImGuiListClipper_Step(ImGuiListClipper* ImGuiListClipper_ctx);
typedef struct ImColor {
  ImVec4 Value;
} ImColor;
// void imgui_ImColor();
// void imgui_ImColor(int r, int g, int b, int a);
// void imgui_ImColor(ImU32 rgba);
// void imgui_ImColor(float r, float g, float b, float a);
// void imgui_ImColor(const ImVec4* col);
void imgui_ImColor_SetHSV(ImColor* ImColor_ctx, float h, float s, float v, float a);
ImColor imgui_ImColor_HSV(ImColor* ImColor_ctx, float h, float s, float v, float a);
typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);
typedef struct ImDrawCmd {
  ImVec4 ClipRect;
  ImTextureID TextureId;
  unsigned int VtxOffset;
  unsigned int IdxOffset;
  unsigned int ElemCount;
  ImDrawCallback UserCallback;
  void* UserCallbackData;
} ImDrawCmd;
// void imgui_ImDrawCmd();
typedef unsigned short ImDrawIdx;
typedef struct ImDrawVert {
  ImVec2 pos;
  ImVec2 uv;
  ImU32 col;
} ImDrawVert;
typedef struct ImDrawCmdHeader {
  ImVec4 ClipRect;
  ImTextureID TextureId;
  unsigned int VtxOffset;
} ImDrawCmdHeader;
typedef struct ImDrawListSplitter {
  int _Current;
  int _Count;
  ImVector _Channels;
} ImDrawListSplitter;
// void imgui_ImDrawListSplitter();
void imgui_ImDrawListSplitter_Clear(ImDrawListSplitter* ImDrawListSplitter_ctx);
void imgui_ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter* ImDrawListSplitter_ctx);
void imgui_ImDrawListSplitter_Split(ImDrawListSplitter* ImDrawListSplitter_ctx, ImDrawList* draw_list, int count);
void imgui_ImDrawListSplitter_Merge(ImDrawListSplitter* ImDrawListSplitter_ctx, ImDrawList* draw_list);
void imgui_ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter* ImDrawListSplitter_ctx, ImDrawList* draw_list, int channel_idx);

typedef enum {
  ImDrawCornerFlags_None = 0,
  ImDrawCornerFlags_TopLeft = 1 << 0,
  ImDrawCornerFlags_TopRight = 1 << 1,
  ImDrawCornerFlags_BotLeft = 1 << 2,
  ImDrawCornerFlags_BotRight = 1 << 3,
  ImDrawCornerFlags_Top = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
  ImDrawCornerFlags_Bot = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
  ImDrawCornerFlags_Left = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
  ImDrawCornerFlags_Right = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,
  ImDrawCornerFlags_All = 0xF
} ImDrawCornerFlags_;

typedef enum {
  ImDrawListFlags_None = 0,
  ImDrawListFlags_AntiAliasedLines = 1 << 0,
  ImDrawListFlags_AntiAliasedLinesUseTex = 1 << 1,
  ImDrawListFlags_AntiAliasedFill = 1 << 2,
  ImDrawListFlags_AllowVtxOffset = 1 << 3
} ImDrawListFlags_;
typedef struct ImDrawList {
  ImVector CmdBuffer;
  ImVector IdxBuffer;
  ImVector VtxBuffer;
  ImDrawListFlags Flags;
  unsigned int _VtxCurrentIdx;
  const ImDrawListSharedData* _Data;
  const char* _OwnerName;
  ImDrawVert* _VtxWritePtr;
  ImDrawIdx* _IdxWritePtr;
  ImVector _ClipRectStack;
  ImVector _TextureIdStack;
  ImVector _Path;
  ImDrawCmdHeader _CmdHeader;
  ImDrawListSplitter _Splitter;
  float _FringeScale;
} ImDrawList;
// void imgui_ImDrawList(const ImDrawListSharedData* shared_data);
void imgui_ImDrawList_PushClipRect(ImDrawList* ImDrawList_ctx, ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect);
void imgui_ImDrawList_PushClipRectFullScreen(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList_PopClipRect(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList_PushTextureID(ImDrawList* ImDrawList_ctx, ImTextureID texture_id);
void imgui_ImDrawList_PopTextureID(ImDrawList* ImDrawList_ctx);
ImVec2 imgui_ImDrawList_GetClipRectMin(ImDrawList* ImDrawList_ctx);
ImVec2 imgui_ImDrawList_GetClipRectMax(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList_AddLine(ImDrawList* ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, ImU32 col, float thickness);
void imgui_ImDrawList_AddRect(ImDrawList* ImDrawList_ctx, const ImVec2* p_min, const ImVec2* p_max, ImU32 col, float rounding, ImDrawCornerFlags rounding_corners, float thickness);
void imgui_ImDrawList_AddRectFilled(ImDrawList* ImDrawList_ctx, const ImVec2* p_min, const ImVec2* p_max, ImU32 col, float rounding, ImDrawCornerFlags rounding_corners);
void imgui_ImDrawList_AddRectFilledMultiColor(ImDrawList* ImDrawList_ctx, const ImVec2* p_min, const ImVec2* p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
void imgui_ImDrawList_AddQuad(ImDrawList* ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, ImU32 col, float thickness);
void imgui_ImDrawList_AddQuadFilled(ImDrawList* ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, ImU32 col);
void imgui_ImDrawList_AddTriangle(ImDrawList* ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, ImU32 col, float thickness);
void imgui_ImDrawList_AddTriangleFilled(ImDrawList* ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, ImU32 col);
void imgui_ImDrawList_AddCircle(ImDrawList* ImDrawList_ctx, const ImVec2* center, float radius, ImU32 col, int num_segments, float thickness);
void imgui_ImDrawList_AddCircleFilled(ImDrawList* ImDrawList_ctx, const ImVec2* center, float radius, ImU32 col, int num_segments);
void imgui_ImDrawList_AddNgon(ImDrawList* ImDrawList_ctx, const ImVec2* center, float radius, ImU32 col, int num_segments, float thickness);
void imgui_ImDrawList_AddNgonFilled(ImDrawList* ImDrawList_ctx, const ImVec2* center, float radius, ImU32 col, int num_segments);
void imgui_ImDrawList_AddText1(ImDrawList* ImDrawList_ctx, const ImVec2* pos, ImU32 col, const char* text_begin, const char* text_end);
void imgui_ImDrawList_AddText2(ImDrawList* ImDrawList_ctx, const ImFont* font, float font_size, const ImVec2* pos, ImU32 col, const char* text_begin, const char* text_end, float wrap_width, const ImVec4* cpu_fine_clip_rect);
void imgui_ImDrawList_AddPolyline(ImDrawList* ImDrawList_ctx, const ImVec2* points, int num_points, ImU32 col, bool closed, float thickness);
void imgui_ImDrawList_AddConvexPolyFilled(ImDrawList* ImDrawList_ctx, const ImVec2* points, int num_points, ImU32 col);
void imgui_ImDrawList_AddBezierCubic(ImDrawList* ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, ImU32 col, float thickness, int num_segments);
void imgui_ImDrawList_AddBezierQuadratic(ImDrawList* ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, ImU32 col, float thickness, int num_segments);
void imgui_ImDrawList_AddImage(ImDrawList* ImDrawList_ctx, ImTextureID user_texture_id, const ImVec2* p_min, const ImVec2* p_max, const ImVec2* uv_min, const ImVec2* uv_max, ImU32 col);
void imgui_ImDrawList_AddImageQuad(ImDrawList* ImDrawList_ctx, ImTextureID user_texture_id, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, const ImVec2* uv1, const ImVec2* uv2, const ImVec2* uv3, const ImVec2* uv4, ImU32 col);
void imgui_ImDrawList_AddImageRounded(ImDrawList* ImDrawList_ctx, ImTextureID user_texture_id, const ImVec2* p_min, const ImVec2* p_max, const ImVec2* uv_min, const ImVec2* uv_max, ImU32 col, float rounding, ImDrawCornerFlags rounding_corners);
void imgui_ImDrawList_PathClear(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList_PathLineTo(ImDrawList* ImDrawList_ctx, const ImVec2* pos);
void imgui_ImDrawList_PathLineToMergeDuplicate(ImDrawList* ImDrawList_ctx, const ImVec2* pos);
void imgui_ImDrawList_PathFillConvex(ImDrawList* ImDrawList_ctx, ImU32 col);
void imgui_ImDrawList_PathStroke(ImDrawList* ImDrawList_ctx, ImU32 col, bool closed, float thickness);
void imgui_ImDrawList_PathArcTo(ImDrawList* ImDrawList_ctx, const ImVec2* center, float radius, float a_min, float a_max, int num_segments);
void imgui_ImDrawList_PathArcToFast(ImDrawList* ImDrawList_ctx, const ImVec2* center, float radius, int a_min_of_12, int a_max_of_12);
void imgui_ImDrawList_PathBezierCubicCurveTo(ImDrawList* ImDrawList_ctx, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, int num_segments);
void imgui_ImDrawList_PathBezierQuadraticCurveTo(ImDrawList* ImDrawList_ctx, const ImVec2* p2, const ImVec2* p3, int num_segments);
void imgui_ImDrawList_PathRect(ImDrawList* ImDrawList_ctx, const ImVec2* rect_min, const ImVec2* rect_max, float rounding, ImDrawCornerFlags rounding_corners);
void imgui_ImDrawList_AddCallback(ImDrawList* ImDrawList_ctx, ImDrawCallback callback, void* callback_data);
void imgui_ImDrawList_AddDrawCmd(ImDrawList* ImDrawList_ctx);
ImDrawList * imgui_ImDrawList_CloneOutput(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList_ChannelsSplit(ImDrawList* ImDrawList_ctx, int count);
void imgui_ImDrawList_ChannelsMerge(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList_ChannelsSetCurrent(ImDrawList* ImDrawList_ctx, int n);
void imgui_ImDrawList_PrimReserve(ImDrawList* ImDrawList_ctx, int idx_count, int vtx_count);
void imgui_ImDrawList_PrimUnreserve(ImDrawList* ImDrawList_ctx, int idx_count, int vtx_count);
void imgui_ImDrawList_PrimRect(ImDrawList* ImDrawList_ctx, const ImVec2* a, const ImVec2* b, ImU32 col);
void imgui_ImDrawList_PrimRectUV(ImDrawList* ImDrawList_ctx, const ImVec2* a, const ImVec2* b, const ImVec2* uv_a, const ImVec2* uv_b, ImU32 col);
void imgui_ImDrawList_PrimQuadUV(ImDrawList* ImDrawList_ctx, const ImVec2* a, const ImVec2* b, const ImVec2* c, const ImVec2* d, const ImVec2* uv_a, const ImVec2* uv_b, const ImVec2* uv_c, const ImVec2* uv_d, ImU32 col);
void imgui_ImDrawList_PrimWriteVtx(ImDrawList* ImDrawList_ctx, const ImVec2* pos, const ImVec2* uv, ImU32 col);
void imgui_ImDrawList_PrimWriteIdx(ImDrawList* ImDrawList_ctx, ImDrawIdx idx);
void imgui_ImDrawList_PrimVtx(ImDrawList* ImDrawList_ctx, const ImVec2* pos, const ImVec2* uv, ImU32 col);
void imgui_ImDrawList__ResetForNewFrame(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList__ClearFreeMemory(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList__PopUnusedDrawCmd(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList__OnChangedClipRect(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList__OnChangedTextureID(ImDrawList* ImDrawList_ctx);
void imgui_ImDrawList__OnChangedVtxOffset(ImDrawList* ImDrawList_ctx);
typedef struct ImDrawData {
  bool Valid;
  ImDrawList** CmdLists;
  int CmdListsCount;
  int TotalIdxCount;
  int TotalVtxCount;
  ImVec2 DisplayPos;
  ImVec2 DisplaySize;
  ImVec2 FramebufferScale;
  ImGuiViewport* OwnerViewport;
} ImDrawData;
// void imgui_ImDrawData();
void imgui_ImDrawData_Clear(ImDrawData* ImDrawData_ctx);
void imgui_ImDrawData_DeIndexAllBuffers(ImDrawData* ImDrawData_ctx);
void imgui_ImDrawData_ScaleClipRects(ImDrawData* ImDrawData_ctx, const ImVec2* fb_scale);
typedef struct ImFontConfig {
  void* FontData;
  int FontDataSize;
  bool FontDataOwnedByAtlas;
  int FontNo;
  float SizePixels;
  int OversampleH;
  int OversampleV;
  bool PixelSnapH;
  ImVec2 GlyphExtraSpacing;
  ImVec2 GlyphOffset;
  const ImWchar* GlyphRanges;
  float GlyphMinAdvanceX;
  float GlyphMaxAdvanceX;
  bool MergeMode;
  unsigned int FontBuilderFlags;
  float RasterizerMultiply;
  ImWchar EllipsisChar;
  char Name[40];
  ImFont* DstFont;
} ImFontConfig;
// void imgui_ImFontConfig();
typedef struct ImFontGlyph {
  unsigned int Codepoint;
  unsigned int Visible;
  float AdvanceX;
  float X0;
  float Y0;
  float X1;
  float Y1;
  float U0;
  float V0;
  float U1;
  float V1;
} ImFontGlyph;
typedef struct ImFontGlyphRangesBuilder {
  ImVector UsedChars;
} ImFontGlyphRangesBuilder;
// void imgui_ImFontGlyphRangesBuilder();
void imgui_ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ctx);
bool imgui_ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ctx, size_t n);
void imgui_ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ctx, size_t n);
void imgui_ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ctx, ImWchar c);
void imgui_ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ctx, const char* text, const char* text_end);
void imgui_ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ctx, const ImWchar* ranges);
typedef struct ImFontAtlasCustomRect {
  unsigned short Width;
  unsigned short Height;
  unsigned short X;
  unsigned short Y;
  unsigned int GlyphID;
  float GlyphAdvanceX;
  ImVec2 GlyphOffset;
  ImFont* Font;
} ImFontAtlasCustomRect;
// void imgui_ImFontAtlasCustomRect();
bool imgui_ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect* ImFontAtlasCustomRect_ctx);

typedef enum {
  ImFontAtlasFlags_None = 0,
  ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,
  ImFontAtlasFlags_NoMouseCursors = 1 << 1,
  ImFontAtlasFlags_NoBakedLines = 1 << 2
} ImFontAtlasFlags_;
typedef struct ImFontAtlas {
  bool Locked;
  ImFontAtlasFlags Flags;
  ImTextureID TexID;
  int TexDesiredWidth;
  int TexGlyphPadding;
  unsigned char* TexPixelsAlpha8;
  unsigned int* TexPixelsRGBA32;
  int TexWidth;
  int TexHeight;
  ImVec2 TexUvScale;
  ImVec2 TexUvWhitePixel;
  ImVector Fonts;
  ImVector CustomRects;
  ImVector ConfigData;
  ImVec4 TexUvLines[64];
  const ImFontBuilderIO* FontBuilderIO;
  unsigned int FontBuilderFlags;
  int PackIdMouseCursors;
  int PackIdLines;
} ImFontAtlas;
// void imgui_ImFontAtlas();
ImFont * imgui_ImFontAtlas_AddFont(ImFontAtlas* ImFontAtlas_ctx, const ImFontConfig* font_cfg);
ImFont * imgui_ImFontAtlas_AddFontDefault(ImFontAtlas* ImFontAtlas_ctx, const ImFontConfig* font_cfg);
ImFont * imgui_ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* ImFontAtlas_ctx, const char* filename, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges);
ImFont * imgui_ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* ImFontAtlas_ctx, void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges);
ImFont * imgui_ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* ImFontAtlas_ctx, const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges);
ImFont * imgui_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* ImFontAtlas_ctx, const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges);
void imgui_ImFontAtlas_ClearInputData(ImFontAtlas* ImFontAtlas_ctx);
void imgui_ImFontAtlas_ClearTexData(ImFontAtlas* ImFontAtlas_ctx);
void imgui_ImFontAtlas_ClearFonts(ImFontAtlas* ImFontAtlas_ctx);
void imgui_ImFontAtlas_Clear(ImFontAtlas* ImFontAtlas_ctx);
bool imgui_ImFontAtlas_Build(ImFontAtlas* ImFontAtlas_ctx);
void imgui_ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* ImFontAtlas_ctx, unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);
void imgui_ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* ImFontAtlas_ctx, unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);
bool imgui_ImFontAtlas_IsBuilt(ImFontAtlas* ImFontAtlas_ctx);
void imgui_ImFontAtlas_SetTexID(ImFontAtlas* ImFontAtlas_ctx, ImTextureID id);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* ImFontAtlas_ctx);
int imgui_ImFontAtlas_AddCustomRectRegular(ImFontAtlas* ImFontAtlas_ctx, int width, int height);
int imgui_ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* ImFontAtlas_ctx, ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2* offset);
ImFontAtlasCustomRect * imgui_ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* ImFontAtlas_ctx, int index);
void imgui_ImFontAtlas_CalcCustomRectUV(ImFontAtlas* ImFontAtlas_ctx, const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max);
bool imgui_ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* ImFontAtlas_ctx, ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2]);
typedef struct ImFont {
  ImVector IndexAdvanceX;
  float FallbackAdvanceX;
  float FontSize;
  ImVector IndexLookup;
  ImVector Glyphs;
  const ImFontGlyph* FallbackGlyph;
  ImFontAtlas* ContainerAtlas;
  const ImFontConfig* ConfigData;
  short ConfigDataCount;
  ImWchar FallbackChar;
  ImWchar EllipsisChar;
  bool DirtyLookupTables;
  float Scale;
  float Ascent;
  float Descent;
  int MetricsTotalSurface;
  ImU8 Used4kPagesMap[2];
} ImFont;
// void imgui_ImFont();
const ImFontGlyph * imgui_ImFont_FindGlyph(ImFont* ImFont_ctx, ImWchar c);
const ImFontGlyph * imgui_ImFont_FindGlyphNoFallback(ImFont* ImFont_ctx, ImWchar c);
float imgui_ImFont_GetCharAdvance(ImFont* ImFont_ctx, ImWchar c);
bool imgui_ImFont_IsLoaded(ImFont* ImFont_ctx);
const char * imgui_ImFont_GetDebugName(ImFont* ImFont_ctx);
ImVec2 imgui_ImFont_CalcTextSizeA(ImFont* ImFont_ctx, float size, float max_width, float wrap_width, const char* text_begin, const char* text_end, const char** remaining);
const char * imgui_ImFont_CalcWordWrapPositionA(ImFont* ImFont_ctx, float scale, const char* text, const char* text_end, float wrap_width);
void imgui_ImFont_RenderChar(ImFont* ImFont_ctx, ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c);
void imgui_ImFont_RenderText(ImFont* ImFont_ctx, ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4* clip_rect, const char* text_begin, const char* text_end, float wrap_width, bool cpu_fine_clip);
void imgui_ImFont_BuildLookupTable(ImFont* ImFont_ctx);
void imgui_ImFont_ClearOutputData(ImFont* ImFont_ctx);
void imgui_ImFont_GrowIndex(ImFont* ImFont_ctx, int new_size);
void imgui_ImFont_AddGlyph(ImFont* ImFont_ctx, const ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
void imgui_ImFont_AddRemapChar(ImFont* ImFont_ctx, ImWchar dst, ImWchar src, bool overwrite_dst);
void imgui_ImFont_SetGlyphVisible(ImFont* ImFont_ctx, ImWchar c, bool visible);
void imgui_ImFont_SetFallbackChar(ImFont* ImFont_ctx, ImWchar c);
bool imgui_ImFont_IsGlyphRangeUnused(ImFont* ImFont_ctx, unsigned int c_begin, unsigned int c_last);
typedef struct ImGuiPlatformIO {
  void* Platform_CreateWindow; // complex callback: void (*)(ImGuiViewport *) - 
  void* Platform_DestroyWindow; // complex callback: void (*)(ImGuiViewport *) - 
  void* Platform_ShowWindow; // complex callback: void (*)(ImGuiViewport *) - 
  void* Platform_SetWindowPos; // complex callback: void (*)(ImGuiViewport *, ImVec2) - 
  void* Platform_GetWindowPos; // complex callback: ImVec2 (*)(ImGuiViewport *) - 
  void* Platform_SetWindowSize; // complex callback: void (*)(ImGuiViewport *, ImVec2) - 
  void* Platform_GetWindowSize; // complex callback: ImVec2 (*)(ImGuiViewport *) - 
  void* Platform_SetWindowFocus; // complex callback: void (*)(ImGuiViewport *) - 
  void* Platform_GetWindowFocus; // complex callback: bool (*)(ImGuiViewport *) - 
  void* Platform_GetWindowMinimized; // complex callback: bool (*)(ImGuiViewport *) - 
  void* Platform_SetWindowTitle; // complex callback: void (*)(ImGuiViewport *, const char *) - 
  void* Platform_SetWindowAlpha; // complex callback: void (*)(ImGuiViewport *, float) - 
  void* Platform_UpdateWindow; // complex callback: void (*)(ImGuiViewport *) - 
  void* Platform_RenderWindow; // complex callback: void (*)(ImGuiViewport *, void *) - 
  void* Platform_SwapBuffers; // complex callback: void (*)(ImGuiViewport *, void *) - 
  void* Platform_GetWindowDpiScale; // complex callback: float (*)(ImGuiViewport *) - 
  void* Platform_OnChangedViewport; // complex callback: void (*)(ImGuiViewport *) - 
  void* Platform_SetImeInputPos; // complex callback: void (*)(ImGuiViewport *, ImVec2) - 
  void* Platform_CreateVkSurface; // complex callback: int (*)(ImGuiViewport *, ImU64, const void *, ImU64 *) - 
  void* Renderer_CreateWindow; // complex callback: void (*)(ImGuiViewport *) - 
  void* Renderer_DestroyWindow; // complex callback: void (*)(ImGuiViewport *) - 
  void* Renderer_SetWindowSize; // complex callback: void (*)(ImGuiViewport *, ImVec2) - 
  void* Renderer_RenderWindow; // complex callback: void (*)(ImGuiViewport *, void *) - 
  void* Renderer_SwapBuffers; // complex callback: void (*)(ImGuiViewport *, void *) - 
  ImVector Monitors;
  ImGuiViewport* MainViewport;
  ImVector Viewports;
} ImGuiPlatformIO;
// void imgui_ImGuiPlatformIO();
typedef struct ImGuiPlatformMonitor {
  ImVec2 MainPos;
  ImVec2 MainSize;
  ImVec2 WorkPos;
  ImVec2 WorkSize;
  float DpiScale;
} ImGuiPlatformMonitor;
// void imgui_ImGuiPlatformMonitor();

typedef enum {
  ImGuiViewportFlags_None = 0,
  ImGuiViewportFlags_NoDecoration = 1 << 0,
  ImGuiViewportFlags_NoTaskBarIcon = 1 << 1,
  ImGuiViewportFlags_NoFocusOnAppearing = 1 << 2,
  ImGuiViewportFlags_NoFocusOnClick = 1 << 3,
  ImGuiViewportFlags_NoInputs = 1 << 4,
  ImGuiViewportFlags_NoRendererClear = 1 << 5,
  ImGuiViewportFlags_TopMost = 1 << 6,
  ImGuiViewportFlags_Minimized = 1 << 7,
  ImGuiViewportFlags_NoAutoMerge = 1 << 8,
  ImGuiViewportFlags_CanHostOtherWindows = 1 << 9
} ImGuiViewportFlags_;
typedef struct ImGuiViewport {
  ImGuiID ID;
  ImGuiViewportFlags Flags;
  ImVec2 Pos;
  ImVec2 Size;
  ImVec2 WorkOffsetMin;
  ImVec2 WorkOffsetMax;
  float DpiScale;
  ImDrawData* DrawData;
  ImGuiID ParentViewportId;
  void* RendererUserData;
  void* PlatformUserData;
  void* PlatformHandle;
  void* PlatformHandleRaw;
  bool PlatformRequestMove;
  bool PlatformRequestResize;
  bool PlatformRequestClose;
} ImGuiViewport;
// void imgui_ImGuiViewport();
ImVec2 imgui_ImGuiViewport_GetCenter(ImGuiViewport* ImGuiViewport_ctx);
ImVec2 imgui_ImGuiViewport_GetWorkPos(ImGuiViewport* ImGuiViewport_ctx);
ImVec2 imgui_ImGuiViewport_GetWorkSize(ImGuiViewport* ImGuiViewport_ctx);
