{
  "activeGraphId":1,
  "currentGraphID":1,
  "debugEnabled":false,
  "description":"Learn about the very basics of Flowgraph.",
  "frecency":{},
  "graphs":{
    "1":{
      "children":{},
      "description":"This is the description for graph New State",
      "dirty":false,
      "links":[
        [
          2,
          "flow",
          10,
          "flow",
          false
        ],
        [
          12,
          "flow",
          11,
          "flow",
          false
        ],
        [
          10,
          "flow",
          12,
          "flow",
          false
        ],
        [
          13,
          "value",
          12,
          "value",
          false
        ]
      ],
      "name":"New State",
      "nodes":{
        "2":{
          "type":"events/onUpdate",
          "data":{},
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "dtRaw":true,
              "dtReal":true,
              "dtSim":true,
              "enterState":true,
              "exitState":true,
              "flow":false
            }
          },
          "pos":[
            25,
            23
          ]
        },
        "9":{
          "alpha":0.75,
          "backgroundColor":[
            0.5,
            0.5,
            0.5,
            0.5
          ],
          "borderColor":[
            0.800000012,
            0.800000012,
            0.800000012,
            1
          ],
          "commentSize":[
            1062,
            210
          ],
          "commentText":"This is a very simple Flowgraph.\\n\\nFlow will propagate through the graph. The flow starts at the leftmost node, \"on Update\", and will flow through the white links and nodes to the right.\\nWhen flow enters into a node through one of its white flow-pins, it will be active. This means it will do something, have an effect on the world, other nodes, or itself.\\nA node that is active may or may not give the flow to the right, out of a flow-pin. Most nodes do that, signalling that they are done with whatever they were meant to do,\\nor that they are now \"ready\" for the nodes further down the graph to do their things.\\n\\nThis Example will wait for 3 seconds, then print out a message and finally stop the project. Start the project, by clicking the, \"Play\" button above.\\nWatch the message appear in the Event Log (Windows/Event Log).\\n\\n\\n",
          "commentTitle":"Simple Flowgraph",
          "data":{},
          "moveMode":"withoutNodes",
          "pos":[
            -28,
            -266
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "10":{
          "data":{
            "duration":3
          },
          "duration":3,
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":true,
              "useDtSim":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            272,
            22
          ],
          "type":"logic/wait"
        },
        "11":{
          "type":"debug/stopManager",
          "data":{},
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{}
          },
          "pos":[
            864,
            22
          ]
        },
        "12":{
          "type":"debug/log",
          "data":{
            "logTag":"Node #12",
            "logType":"I"
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            552,
            22
          ]
        },
        "13":{
          "data":{},
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "multiLine":false,
          "pos":[
            291,
            135
          ],
          "string":"This is a message.",
          "type":"types/string"
        },
        "14":{
          "alpha":0.75,
          "backgroundColor":[
            0.5,
            0.5,
            0.5,
            0.5
          ],
          "borderColor":[
            0.800000012,
            0.800000012,
            0.800000012,
            1
          ],
          "commentSize":[
            1132,
            310
          ],
          "commentText":"You can also see that there are other-colored pins and links. They come in different types, color-coded.\\nSome of them are:\\n - Flow: White, manages the flow through the project. \\n - String: Purple, can contain a text.\\n - Number: Green, can contain any number.\\n - Boolean: Red, can be true or false.\\n - Vec3: Yellow, can contain a 3-Dimensional Vector (Position, Direction etc)\\nOnly one link can go into each of the in-pins on the left side of a node, unless the link type is Flow, where it can be any number.\\n\\nThis link above connects the message stored in the \"String\" Node to the input-pin of the \"Log\" node. \\n\\nWhen nodes are activated, they can read the values from the links connected to the in-pins on its left, and write values into the links connected to the out-pins on its right side.\\n\\nWhen the flow activates the \"Log\" node, it will read the value from the link and output it to the Event Log.\\n\\n",
          "commentTitle":"Simple Flowgraph",
          "data":{},
          "moveMode":"withoutNodes",
          "pos":[
            -28,
            238
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        }
      },
      "showTab":true,
      "type":"graph",
      "variables":{},
      "viewPos":[
        -268.825073,
        75.5624237
      ],
      "viewZoom":1
    },
    "3":{
      "children":{},
      "description":"This is the description for graph States",
      "dirty":false,
      "isStateGraph":true,
      "links":[
        [
          5,
          "flow",
          4,
          "flow",
          false
        ]
      ],
      "name":"States",
      "nodes":{
        "4":{
          "data":{},
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "fail":false,
              "success":false
            }
          },
          "pins":[
            {
              "1":"out",
              "2":"state",
              "3":"success",
              "5":"This is a flow pin."
            },
            {
              "1":"out",
              "2":"state",
              "3":"fail",
              "5":"This is a flow pin."
            },
            {
              "1":"in",
              "2":"state",
              "3":"flow",
              "5":"This is a flow pin."
            }
          ],
          "pos":[
            0,
            0
          ],
          "targetGraphId":1,
          "type":"states/stateNode"
        },
        "5":{
          "type":"states/stateEntry",
          "data":{},
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -400,
            0
          ]
        },
        "6":{
          "data":{},
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{}
          },
          "pins":[
            {
              "1":"in",
              "2":"state",
              "3":"flow",
              "5":"This is a flow pin."
            }
          ],
          "pos":[
            400,
            0
          ],
          "transitionName":"success",
          "type":"states/stateExit"
        }
      },
      "showTab":true,
      "type":"graph",
      "variables":{},
      "viewPos":[
        -925.428711,
        -157.720108
      ],
      "viewZoom":1.25
    }
  },
  "macros":{},
  "name":"SimpleFlowGraph",
  "savedDir":"/lua/ge/extensions/flowgraph/examples/beginner/",
  "savedFilename":"SimpleFlowGraph.flow.json",
  "stateGraphId":3,
  "variables":{},
  "version":0.1
}